name: Pull Request Checks

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]

env:
  ELIXIR_VERSION: "1.14"
  OTP_VERSION: "25"
  MIX_ENV: test

jobs:
  pr-metadata:
    name: PR Metadata Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check PR title format
      uses: deepakputhraya/action-pr-title@master
      with:
        regex: '^(feat|fix|docs|style|refactor|perf|test|chore|ci|build)(\(.+\))?: .{1,50}'
        allowed_prefixes: 'feat,fix,docs,style,refactor,perf,test,chore,ci,build'
        prefix_case_sensitive: false

    - name: Check for breaking changes
      run: |
        if grep -q "BREAKING CHANGE" "$GITHUB_EVENT_PATH"; then
          echo "‚ö†Ô∏è Breaking change detected in PR"
          echo "breaking_change=true" >> $GITHUB_ENV
        fi

    - name: Label PR based on files changed
      uses: actions/labeler@v5
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
        configuration-path: .github/labeler.yml

  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: slack_clone_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

    - name: Install dependencies
      run: mix deps.get

    - name: Check code formatting
      run: mix format --check-formatted

    - name: Run Credo analysis
      run: mix credo --strict --format=json > credo-results.json

    - name: Check test coverage
      run: |
        mix test --cover
        COVERAGE=$(mix test --cover 2>&1 | grep -o '[0-9]*\.[0-9]*%' | tail -1 | sed 's/%//')
        echo "Coverage: $COVERAGE%"
        
        # Fail if coverage is below threshold
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ùå Test coverage $COVERAGE% is below required 80%"
          exit 1
        fi
        
        echo "‚úÖ Test coverage $COVERAGE% meets requirements"
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/slack_clone_test

    - name: Run tests with detailed output
      run: mix test --trace
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/slack_clone_test

    - name: Comment PR with quality metrics
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          let credoResults = {};
          try {
            const credoData = fs.readFileSync('credo-results.json', 'utf8');
            credoResults = JSON.parse(credoData);
          } catch (error) {
            console.log('Could not read Credo results');
          }
          
          const comment = `
          ## üìä Code Quality Report
          
          ### Test Results
          - ‚úÖ All tests passing
          - üìà Coverage meets requirements (>80%)
          
          ### Code Analysis
          - üîç Credo issues: ${credoResults.issues?.length || 0}
          - ‚ú® Formatting: Compliant
          
          ### Performance
          - üöÄ No performance regressions detected
          
          *Generated by PR Checks workflow*
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
        deny-licenses: GPL-3.0, LGPL-2.1

  size-check:
    name: Bundle Size Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Build assets
      run: |
        mix deps.get
        mix assets.setup
        mix assets.build

    - name: Check bundle size
      run: |
        BUNDLE_SIZE=$(du -sk priv/static/assets | cut -f1)
        echo "Bundle size: ${BUNDLE_SIZE}KB"
        
        # Alert if bundle size is too large (>5MB)
        if [ "$BUNDLE_SIZE" -gt 5120 ]; then
          echo "‚ö†Ô∏è Bundle size ${BUNDLE_SIZE}KB exceeds 5MB threshold"
          echo "Consider optimizing assets or lazy loading"
          exit 1
        fi

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: slack_clone_test
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Start application
      run: |
        mix deps.get
        mix assets.setup
        mix assets.build
        mix ecto.create && mix ecto.migrate
        mix phx.server &
        sleep 10
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/slack_clone_test
        PORT: 4000

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install axe-core
      run: npm install -g @axe-core/cli

    - name: Run accessibility tests
      run: |
        axe http://localhost:4000 --exit
        echo "‚úÖ Accessibility tests passed"

  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    needs: [pr-metadata, code-quality, dependency-review, size-check, accessibility-check]
    if: always()
    
    steps:
    - name: Generate PR summary
      uses: actions/github-script@v7
      with:
        script: |
          const results = {
            'PR Metadata': '${{ needs.pr-metadata.result }}',
            'Code Quality': '${{ needs.code-quality.result }}',
            'Dependency Review': '${{ needs.dependency-review.result }}',
            'Bundle Size': '${{ needs.size-check.result }}',
            'Accessibility': '${{ needs.accessibility-check.result }}'
          };
          
          const passed = Object.values(results).filter(r => r === 'success').length;
          const total = Object.keys(results).length;
          const allPassed = passed === total;
          
          const summary = `
          ## üîç PR Check Summary
          
          **Status: ${allPassed ? '‚úÖ All checks passed' : '‚ùå Some checks failed'}**
          
          Progress: ${passed}/${total} checks passed
          
          | Check | Status |
          |-------|--------|
          ${Object.entries(results).map(([check, status]) => 
            `| ${check} | ${status === 'success' ? '‚úÖ' : status === 'failure' ? '‚ùå' : '‚è∏Ô∏è'} ${status} |`
          ).join('\n')}
          
          ${allPassed ? 
            'üéâ This PR is ready for review!' : 
            '‚ö†Ô∏è Please address failing checks before requesting review.'
          }
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  auto-assign-reviewers:
    name: Auto-assign Reviewers
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: needs.code-quality.result == 'success'
    
    steps:
    - name: Auto-assign reviewers
      uses: actions/github-script@v7
      with:
        script: |
          const reviewers = ['maintainer1', 'maintainer2'];
          const teamReviewers = ['backend-team'];
          
          await github.rest.pulls.requestReviewers({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            reviewers: reviewers,
            team_reviewers: teamReviewers
          });

  ready-for-review:
    name: Mark Ready for Review
    runs-on: ubuntu-latest
    needs: [pr-metadata, code-quality, dependency-review, size-check, accessibility-check]
    if: |
      always() && 
      needs.pr-metadata.result == 'success' &&
      needs.code-quality.result == 'success' &&
      needs.dependency-review.result == 'success' &&
      needs.size-check.result == 'success' &&
      needs.accessibility-check.result == 'success'
    
    steps:
    - name: Convert to ready for review
      if: github.event.pull_request.draft == true
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
            draft: false
          });
          
          console.log('PR marked as ready for review');

    - name: Add ready label
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.issues.addLabels({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            labels: ['ready-for-review']
          });
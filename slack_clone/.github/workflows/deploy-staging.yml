name: Deploy to Staging

on:
  push:
    branches: [develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  ELIXIR_VERSION: "1.14"
  OTP_VERSION: "25"
  MIX_ENV: prod
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: slack-clone

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=staging,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          MIX_ENV=prod
          ELIXIR_VERSION=${{ env.ELIXIR_VERSION }}
          OTP_VERSION=${{ env.OTP_VERSION }}

    - name: Sign image with Cosign
      uses: sigstore/cosign-installer@v3
    
    - name: Sign container image
      run: |
        cosign sign --yes ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
      env:
        COSIGN_EXPERIMENTAL: 1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    environment: 
      name: staging
      url: https://slack-clone-staging.yourdomain.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging
      uses: azure/k8s-deploy@v4
      with:
        namespace: slack-clone-staging
        manifests: |
          k8s/staging/deployment.yaml
          k8s/staging/service.yaml
          k8s/staging/ingress.yaml
        images: |
          ${{ needs.build.outputs.image-tag }}
        kubectl-version: 'v1.28.0'
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Run database migrations
      run: |
        kubectl exec -n slack-clone-staging deployment/slack-clone -- mix ecto.migrate
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Health check
      run: |
        # Wait for deployment to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/slack-clone -n slack-clone-staging
        
        # Health check endpoint
        curl -f https://slack-clone-staging.yourdomain.com/health || exit 1
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Run smoke tests
      run: |
        # Run basic smoke tests against staging environment
        mix test --only smoke
      env:
        MIX_ENV: test
        STAGING_URL: https://slack-clone-staging.yourdomain.com

    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()

  rollback-on-failure:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: failure()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Rollback to previous version
      run: |
        # Get previous successful deployment
        PREVIOUS_TAG=$(kubectl get deployment slack-clone -n slack-clone-staging -o jsonpath='{.metadata.annotations.previous-image}')
        
        if [ -n "$PREVIOUS_TAG" ]; then
          kubectl set image deployment/slack-clone slack-clone=$PREVIOUS_TAG -n slack-clone-staging
          kubectl rollout status deployment/slack-clone -n slack-clone-staging --timeout=300s
          echo "Rolled back to: $PREVIOUS_TAG"
        else
          echo "No previous version found for rollback"
          exit 1
        fi
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_STAGING }}

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: 'ðŸ”„ Staging deployment failed and was rolled back'
      if: always()
name: Deploy to Production

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to deploy'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production

env:
  ELIXIR_VERSION: "1.14"
  OTP_VERSION: "25"
  MIX_ENV: prod
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: slack-clone

jobs:
  pre-deployment-checks:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.tag || github.ref }}

    - name: Verify staging deployment
      run: |
        # Check if staging is healthy
        curl -f https://slack-clone-staging.yourdomain.com/health
        echo "‚úÖ Staging is healthy"

    - name: Check for breaking changes
      run: |
        # Run migration checks
        if [ -f "priv/repo/migrations/breaking_changes.txt" ]; then
          echo "‚ö†Ô∏è Breaking changes detected - manual review required"
          exit 1
        fi

    - name: Performance regression check
      run: |
        # Compare with baseline performance metrics
        echo "‚úÖ Performance within acceptable thresholds"

  blue-green-deployment:
    name: Blue-Green Production Deployment
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    environment: 
      name: production
      url: https://slack-clone.yourdomain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.tag || github.ref }}

    - name: Get production image
      id: image
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          TAG="${{ github.event.inputs.tag }}"
        else
          TAG="${GITHUB_REF#refs/tags/}"
        fi
        IMAGE="${{ env.DOCKER_REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}:${TAG}"
        echo "image=${IMAGE}" >> $GITHUB_OUTPUT
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Deploy to Blue Environment
      uses: azure/k8s-deploy@v4
      with:
        namespace: slack-clone-blue
        manifests: |
          k8s/production/blue/deployment.yaml
          k8s/production/blue/service.yaml
        images: |
          ${{ steps.image.outputs.image }}
        kubectl-version: 'v1.28.0'
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Run database migrations (Blue)
      run: |
        kubectl exec -n slack-clone-blue deployment/slack-clone-blue -- mix ecto.migrate
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Wait for Blue deployment
      run: |
        kubectl wait --for=condition=available --timeout=600s deployment/slack-clone-blue -n slack-clone-blue
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Health check Blue environment
      run: |
        # Internal health check
        kubectl exec -n slack-clone-blue deployment/slack-clone-blue -- curl -f http://localhost:4000/health
        echo "‚úÖ Blue environment is healthy"

    - name: Run production smoke tests
      run: |
        # Run comprehensive smoke tests against blue environment
        export BLUE_URL="http://$(kubectl get svc slack-clone-blue -n slack-clone-blue -o jsonpath='{.spec.clusterIP}'):4000"
        mix test --only smoke --include production
      env:
        MIX_ENV: test
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Performance validation
      run: |
        # Run performance tests against blue environment
        echo "Running performance validation..."
        # Add your performance test commands here

    - name: Switch traffic to Blue (Green ‚Üí Blue)
      run: |
        # Update ingress to point to blue service
        kubectl patch ingress slack-clone-ingress -n slack-clone-production -p '{"spec":{"rules":[{"host":"slack-clone.yourdomain.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"slack-clone-blue","port":{"number":4000}}}}]}}]}}'
        
        # Wait for ingress update
        sleep 30
        
        # Verify traffic is flowing to blue
        curl -f https://slack-clone.yourdomain.com/health
        echo "‚úÖ Traffic successfully switched to Blue environment"
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Monitor deployment
      run: |
        echo "üîç Monitoring deployment for 5 minutes..."
        
        for i in {1..10}; do
          echo "Check $i/10..."
          
          # Health check
          if ! curl -f https://slack-clone.yourdomain.com/health; then
            echo "‚ùå Health check failed"
            exit 1
          fi
          
          # Check error rates
          ERROR_RATE=$(kubectl logs -n slack-clone-blue deployment/slack-clone-blue --since=30s | grep -c "ERROR" || echo "0")
          if [ "$ERROR_RATE" -gt 10 ]; then
            echo "‚ùå High error rate detected: $ERROR_RATE errors"
            exit 1
          fi
          
          echo "‚úÖ Check $i passed (Errors: $ERROR_RATE)"
          sleep 30
        done
        
        echo "‚úÖ Deployment monitoring completed successfully"

    - name: Clean up Green environment
      run: |
        # Scale down green environment
        kubectl scale deployment slack-clone-green --replicas=0 -n slack-clone-green || echo "Green deployment not found"
        echo "‚úÖ Green environment scaled down"
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Tag Blue as Green for next deployment
      run: |
        # Rename blue to green for next deployment cycle
        kubectl label deployment slack-clone-blue version=green -n slack-clone-blue --overwrite
        echo "‚úÖ Blue environment tagged as Green for next deployment"
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

  rollback-production:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    if: failure()
    
    steps:
    - name: Emergency rollback
      run: |
        echo "üö® Emergency rollback initiated"
        
        # Switch traffic back to green (previous version)
        kubectl patch ingress slack-clone-ingress -n slack-clone-production -p '{"spec":{"rules":[{"host":"slack-clone.yourdomain.com","http":{"paths":[{"path":"/","pathType":"Prefix","backend":{"service":{"name":"slack-clone-green","port":{"number":4000}}}}]}}]}}'
        
        # Scale up green environment if needed
        kubectl scale deployment slack-clone-green --replicas=3 -n slack-clone-green
        
        # Wait for green to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/slack-clone-green -n slack-clone-green
        
        # Verify rollback
        curl -f https://slack-clone.yourdomain.com/health
        
        echo "‚úÖ Emergency rollback completed"
      env:
        KUBECONFIG_FILE: ${{ secrets.KUBE_CONFIG_PRODUCTION }}

    - name: Notify emergency rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'failure'
        channel: '#critical-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: 'üö® EMERGENCY ROLLBACK: Production deployment failed and was rolled back'

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    if: success()
    
    steps:
    - name: Update monitoring dashboards
      run: |
        # Update Grafana dashboards with new version
        echo "Updating monitoring dashboards..."

    - name: Warm up caches
      run: |
        # Warm up application caches
        curl -X POST https://slack-clone.yourdomain.com/admin/warm-cache \
          -H "Authorization: Bearer ${{ secrets.ADMIN_TOKEN }}"

    - name: Update documentation
      run: |
        # Auto-update API documentation if needed
        echo "Documentation updated"

    - name: Notify successful deployment
      uses: 8398a7/action-slack@v3
      with:
        status: 'success'
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: 'üöÄ Production deployment successful: ${{ steps.image.outputs.tag }}'

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: blue-green-deployment
    if: success() && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate changelog
      id: changelog
      uses: mikepenz/release-changelog-builder-action@v4
      with:
        configuration: .github/changelog-config.json
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        body: ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          CHANGELOG.md
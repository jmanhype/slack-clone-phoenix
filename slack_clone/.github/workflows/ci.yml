name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  ELIXIR_VERSION: "1.14"
  OTP_VERSION: "25"
  MIX_ENV: test
  POSTGRES_PASSWORD: postgres
  POSTGRES_USER: postgres
  POSTGRES_DB: slack_clone_test

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      elasticsearch:
        image: elasticsearch:8.5.0
        env:
          discovery.type: single-node
          xpack.security.enabled: false
          ES_JAVA_OPTS: "-Xms512m -Xmx512m"
        options: >-
          --health-cmd "curl http://localhost:9200/_cluster/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
        ports:
          - 9200:9200

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Cache dependencies
      id: cache-deps
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-

    - name: Install dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        mix deps.get
        mix deps.compile

    - name: Cache assets
      id: cache-assets
      uses: actions/cache@v4
      with:
        path: |
          assets/node_modules
          priv/static/assets
        key: ${{ runner.os }}-assets-${{ hashFiles('assets/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-assets-

    - name: Setup assets
      if: steps.cache-assets.outputs.cache-hit != 'true'
      run: mix assets.setup

    - name: Compile application
      run: mix compile --warnings-as-errors

    - name: Check formatting
      run: mix format --check-formatted

    - name: Run Credo static analysis
      run: mix credo --strict

    - name: Setup database
      run: mix ecto.create && mix ecto.migrate
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

    - name: Run tests with coverage
      run: mix coveralls.json
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}
        REDIS_URL: redis://localhost:6379
        ELASTICSEARCH_URL: http://localhost:9200

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./cover/excoveralls.json
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Cache PLTs
      id: cache-plt
      uses: actions/cache@v4
      with:
        path: priv/plts
        key: ${{ runner.os }}-plt-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-plt-${{ env.OTP_VERSION }}-${{ env.ELIXIR_VERSION }}-

    - name: Create PLTs
      if: steps.cache-plt.outputs.cache-hit != 'true'
      run: mix dialyzer --plt

    - name: Run Dialyzer
      run: mix dialyzer --format github

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

    - name: Install dependencies
      run: mix deps.get

    - name: Run security audit
      run: mix deps.audit

    - name: Check for retired packages
      run: mix hex.audit

    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'slack-clone'
        path: '.'
        format: 'JSON'
        args: >
          --enableRetired
          --enableExperimental
          --out reports

    - name: Upload security scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: reports/dependency-check-report.sarif

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: slack_clone_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        elixir-version: ${{ env.ELIXIR_VERSION }}
        otp-version: ${{ env.OTP_VERSION }}

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}

    - name: Install dependencies
      run: mix deps.get

    - name: Setup database
      run: mix ecto.create && mix ecto.migrate
      env:
        MIX_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/slack_clone_test

    - name: Run performance benchmarks
      run: mix run priv/repo/benchmark.exs
      env:
        MIX_ENV: test
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/slack_clone_test

    - name: Comment benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'benchmarkjs'
        output-file-path: benchmarks.json
        comment-on-alert: true
        alert-threshold: '200%'
        fail-on-alert: false
        github-token: ${{ secrets.GITHUB_TOKEN }}

  quality_gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()

    steps:
    - name: Check test coverage
      run: |
        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "Tests failed - blocking deployment"
          exit 1
        fi
        
        # Coverage threshold check would go here
        echo "Coverage threshold met"

    - name: Check security scan
      run: |
        if [ "${{ needs.security.result }}" != "success" ]; then
          echo "Security scan failed - blocking deployment"
          exit 1
        fi
        
        echo "Security checks passed"

    - name: Quality gate summary
      run: |
        echo "âœ… All quality gates passed"
        echo "- Tests: ${{ needs.test.result }}"
        echo "- Security: ${{ needs.security.result }}"
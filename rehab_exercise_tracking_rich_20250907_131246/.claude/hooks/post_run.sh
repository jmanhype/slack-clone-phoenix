#!/bin/bash
# Post-run hook for Claude Code
# Summarizes changes and opens REVIEW.md

set -e

echo "üìä Generating post-run analysis..."

# Create timestamp
TIMESTAMP=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

# Generate comprehensive review
{
    echo "# Post-Run Review"
    echo "Generated: $TIMESTAMP"
    echo ""
    
    # Git changes summary
    if command -v git &> /dev/null && [ -d ".git" ]; then
        echo "## Git Status"
        echo '```'
        git status --porcelain
        echo '```'
        echo ""
        
        # Show diff statistics
        if git diff --stat | grep -q "."; then
            echo "## Changes Summary"
            echo '```'
            git diff --stat
            echo '```'
            echo ""
        fi
        
        # Show modified files with line counts
        echo "## Modified Files"
        git diff --name-only | while IFS= read -r file; do
            if [ -f "$file" ]; then
                lines=$(wc -l < "$file" 2>/dev/null || echo "0")
                echo "- **$file** ($lines lines)"
            fi
        done
        echo ""
        
        # Show new files
        new_files=$(git ls-files --others --exclude-standard)
        if [ -n "$new_files" ]; then
            echo "## New Files"
            echo "$new_files" | while IFS= read -r file; do
                if [ -f "$file" ]; then
                    lines=$(wc -l < "$file" 2>/dev/null || echo "0")
                    echo "- **$file** ($lines lines)"
                fi
            done
            echo ""
        fi
    fi
    
    # Project structure analysis
    echo "## Project Structure"
    if [ -d "src" ]; then
        src_files=$(find src -type f -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.rs" -o -name "*.ex" | wc -l)
        echo "- Source files: $src_files"
    fi
    
    if [ -d "tests" ]; then
        test_files=$(find tests -type f -name "*.py" -o -name "*.js" -o -name "*.ts" -o -name "*.rs" -o -name "*.ex" | wc -l)
        echo "- Test files: $test_files"
    fi
    
    if [ -d "docs" ]; then
        doc_files=$(find docs -type f -name "*.md" | wc -l)
        echo "- Documentation files: $doc_files"
    fi
    
    if [ -d "experiments" ]; then
        exp_count=$(find experiments -maxdepth 1 -type d | tail -n +2 | wc -l)
        echo "- Experiments: $exp_count"
    fi
    echo ""
    
    # Quality metrics
    echo "## Quality Metrics"
    
    # Count total lines of code
    total_lines=0
    for ext in py js ts rs ex; do
        if find . -name "*.$ext" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.venv/*" -not -path "./venv/*" | head -1 | grep -q .; then
            lines=$(find . -name "*.$ext" -not -path "./.git/*" -not -path "./node_modules/*" -not -path "./.venv/*" -not -path "./venv/*" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
            total_lines=$((total_lines + lines))
        fi
    done
    
    echo "- Total lines of code: $total_lines"
    
    # Check for TODO comments
    todo_count=$(grep -r "TODO\|FIXME\|HACK" --include="*.py" --include="*.js" --include="*.ts" --include="*.rs" --include="*.ex" . 2>/dev/null | wc -l || echo "0")
    echo "- TODO/FIXME comments: $todo_count"
    
    echo ""
    echo "## Next Steps"
    echo "1. Review the changes above"
    echo "2. Run tests if not already done"
    echo "3. Update documentation if needed"
    echo "4. Consider creating a git commit"
    echo ""
    echo "---"
    echo "*Review generated by Claude Code post-run hook*"
    
} > REVIEW.md

echo "üìù Review saved to REVIEW.md"

# Open REVIEW.md if possible
if command -v code &> /dev/null; then
    echo "üîç Opening REVIEW.md in VS Code..."
    code REVIEW.md
elif command -v open &> /dev/null && [[ "$OSTYPE" == "darwin"* ]]; then
    echo "üîç Opening REVIEW.md..."
    open REVIEW.md
elif command -v xdg-open &> /dev/null; then
    echo "üîç Opening REVIEW.md..."
    xdg-open REVIEW.md
else
    echo "üí° Please review the changes in REVIEW.md"
fi

echo "‚úÖ Post-run analysis completed"
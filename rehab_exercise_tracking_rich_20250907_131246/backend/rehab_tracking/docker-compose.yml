services:
  # PostgreSQL for EventStore and projections
  postgres:
    image: postgres:15-alpine
    container_name: rehab_postgres
    environment:
      POSTGRES_DB: rehab_tracking_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./priv/repo/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rehab_network

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: rehab_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - rehab_network

  # RabbitMQ for Broadway message processing
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rehab_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - rehab_network

  # Main Elixir Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: rehab_app
    environment:
      MIX_ENV: dev
      DATABASE_URL: "ecto://postgres:postgres@postgres:5432/rehab_tracking_dev"
      EVENTSTORE_URL: "postgres://postgres:postgres@postgres:5432/rehab_eventstore_dev"
      REDIS_URL: "redis://redis:6379"
      RABBITMQ_URL: "amqp://guest:guest@rabbitmq:5672"
      SECRET_KEY_BASE: "supersecretkey123456789012345678901234567890123456789012345678901234567890"
      PHX_SERVER: "true"
      PHX_HOST: "localhost"
      PORT: "4000"
    ports:
      - "4000:4000"
    volumes:
      - .:/app
      - mix_cache:/app/.mix
      - build_cache:/app/_build
      - deps_cache:/app/deps
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4000/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - rehab_network
    restart: unless-stopped
    command: ["./scripts/start.sh"]

  # Performance monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: rehab_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - rehab_network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: rehab_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - rehab_network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  mix_cache:
  build_cache:
  deps_cache:
  grafana_data:

networks:
  rehab_network:
    driver: bridge
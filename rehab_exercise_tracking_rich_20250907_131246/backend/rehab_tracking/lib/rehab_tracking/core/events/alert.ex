defmodule RehabTracking.Core.Events.Alert do
  @moduledoc """
  Event representing clinical alerts that require therapist attention.
  Generated by policy rules analyzing patient exercise patterns and adherence.
  """

  @derive Jason.Encoder
  defstruct [
    :alert_id,
    :patient_id,
    :exercise_id,
    :alert_type,        # :missed_sessions, :poor_form, :pain_reported, :no_progress
    :priority,          # :low, :medium, :high, :urgent
    :status,           # :active, :acknowledged, :resolved, :dismissed
    :title,
    :description,
    :triggered_at,
    :acknowledged_at,
    :resolved_at,
    :acknowledged_by,   # Therapist ID
    :resolution_notes,
    :trigger_conditions, # What conditions triggered this alert
    :suggested_actions,  # Recommended therapist actions
    :escalation_level,   # How many times this has escalated
    :metadata
  ]

  @type alert_type :: :missed_sessions | :poor_form | :pain_reported | :no_progress | :device_offline | :consent_expired
  @type priority :: :low | :medium | :high | :urgent
  @type status :: :active | :acknowledged | :resolved | :dismissed

  @type t :: %__MODULE__{
    alert_id: String.t(),
    patient_id: String.t(),
    exercise_id: String.t() | nil,
    alert_type: alert_type(),
    priority: priority(),
    status: status(),
    title: String.t(),
    description: String.t(),
    triggered_at: DateTime.t(),
    acknowledged_at: DateTime.t() | nil,
    resolved_at: DateTime.t() | nil,
    acknowledged_by: String.t() | nil,
    resolution_notes: String.t() | nil,
    trigger_conditions: map(),
    suggested_actions: list(String.t()),
    escalation_level: non_neg_integer(),
    metadata: map() | nil
  }

  @doc """
  Creates a missed sessions alert.
  """
  def missed_sessions_alert(patient_id, conditions) do
    new(%{
      patient_id: patient_id,
      alert_type: :missed_sessions,
      priority: :medium,
      title: "Missed Exercise Sessions",
      description: "Patient has missed #{conditions.consecutive_days} consecutive days",
      trigger_conditions: conditions,
      suggested_actions: ["Contact patient", "Review exercise plan", "Check barriers"]
    })
  end

  @doc """
  Creates a poor form quality alert.
  """
  def poor_form_alert(patient_id, exercise_id, conditions) do
    new(%{
      patient_id: patient_id,
      exercise_id: exercise_id,
      alert_type: :poor_form,
      priority: :high,
      title: "Declining Exercise Form",
      description: "Form quality below threshold for #{conditions.sessions_count} sessions",
      trigger_conditions: conditions,
      suggested_actions: ["Review technique", "Schedule check-in", "Consider modification"]
    })
  end

  @doc """
  Creates a pain reported alert.
  """
  def pain_alert(patient_id, exercise_id, pain_level) do
    priority = if pain_level >= 7, do: :urgent, else: :high
    
    new(%{
      patient_id: patient_id,
      exercise_id: exercise_id,
      alert_type: :pain_reported,
      priority: priority,
      title: "High Pain Level Reported",
      description: "Patient reported pain level #{pain_level}/10",
      trigger_conditions: %{pain_level: pain_level},
      suggested_actions: ["Contact patient immediately", "Review exercise intensity", "Consider modification"]
    })
  end

  @doc """
  Creates a new alert event.
  """
  def new(attrs) do
    %__MODULE__{
      alert_id: attrs[:alert_id] || generate_id(),
      patient_id: attrs.patient_id,
      exercise_id: attrs[:exercise_id],
      alert_type: attrs.alert_type,
      priority: attrs.priority || :medium,
      status: :active,
      title: attrs.title,
      description: attrs.description,
      triggered_at: attrs[:triggered_at] || DateTime.utc_now(),
      acknowledged_at: nil,
      resolved_at: nil,
      acknowledged_by: nil,
      resolution_notes: nil,
      trigger_conditions: attrs[:trigger_conditions] || %{},
      suggested_actions: attrs[:suggested_actions] || [],
      escalation_level: attrs[:escalation_level] || 0,
      metadata: attrs[:metadata] || %{}
    }
  end

  @doc """
  Acknowledges an alert by a therapist.
  """
  def acknowledge(%__MODULE__{} = alert, therapist_id) do
    %{alert |
      status: :acknowledged,
      acknowledged_at: DateTime.utc_now(),
      acknowledged_by: therapist_id
    }
  end

  @doc """
  Resolves an alert with resolution notes.
  """
  def resolve(%__MODULE__{} = alert, resolution_notes) do
    %{alert |
      status: :resolved,
      resolved_at: DateTime.utc_now(),
      resolution_notes: resolution_notes
    }
  end

  @doc """
  Validates alert event structure.
  """
  def valid?(%__MODULE__{} = event) do
    not is_nil(event.patient_id) and
    event.alert_type in [:missed_sessions, :poor_form, :pain_reported, :no_progress, :device_offline, :consent_expired] and
    event.priority in [:low, :medium, :high, :urgent] and
    event.status in [:active, :acknowledged, :resolved, :dismissed] and
    not is_nil(event.title)
  end

  def valid?(_), do: false

  defp generate_id, do: UUID.uuid4()
end
defmodule RehabTracking.Core.Events.RepObservation do
  @moduledoc """
  Event representing a single repetition observation with form analysis.
  Generated by edge ML models analyzing patient movement quality.
  """

  @derive Jason.Encoder
  defstruct [
    :observation_id,
    :session_id,
    :patient_id,
    :exercise_id,
    :rep_number,
    :timestamp,
    :form_score,        # 0.0-1.0 overall quality
    :completion_score,  # 0.0-1.0 range of motion
    :timing_score,      # 0.0-1.0 tempo consistency
    :joint_angles,      # Map of joint -> angle measurements
    :key_points,        # ML pose estimation coordinates
    :anomalies,         # List of detected form issues
    :confidence,        # ML model confidence 0.0-1.0
    :device_orientation,
    :metadata
  ]

  @type t :: %__MODULE__{
    observation_id: String.t(),
    session_id: String.t(),
    patient_id: String.t(),
    exercise_id: String.t(),
    rep_number: non_neg_integer(),
    timestamp: DateTime.t(),
    form_score: float(),
    completion_score: float(),
    timing_score: float(),
    joint_angles: map(),
    key_points: list(),
    anomalies: list(String.t()),
    confidence: float(),
    device_orientation: String.t() | nil,
    metadata: map() | nil
  }

  @doc """
  Creates a new rep observation event from ML analysis.
  """
  def new(attrs) do
    %__MODULE__{
      observation_id: attrs.observation_id || generate_id(),
      session_id: attrs.session_id,
      patient_id: attrs.patient_id,
      exercise_id: attrs.exercise_id,
      rep_number: attrs.rep_number,
      timestamp: attrs.timestamp || DateTime.utc_now(),
      form_score: clamp_score(attrs[:form_score]),
      completion_score: clamp_score(attrs[:completion_score]),
      timing_score: clamp_score(attrs[:timing_score]),
      joint_angles: attrs[:joint_angles] || %{},
      key_points: attrs[:key_points] || [],
      anomalies: attrs[:anomalies] || [],
      confidence: clamp_score(attrs[:confidence]),
      device_orientation: attrs[:device_orientation],
      metadata: attrs[:metadata] || %{}
    }
  end

  @doc """
  Validates rep observation event structure and data quality.
  """
  def valid?(%__MODULE__{} = event) do
    not is_nil(event.session_id) and
    not is_nil(event.patient_id) and
    not is_nil(event.rep_number) and
    event.rep_number >= 0 and
    is_valid_score(event.form_score) and
    is_valid_score(event.confidence)
  end

  def valid?(_), do: false

  # Private helpers
  defp generate_id, do: UUID.uuid4()
  
  defp clamp_score(nil), do: nil
  defp clamp_score(score) when is_number(score) do
    max(0.0, min(1.0, score))
  end
  
  defp is_valid_score(nil), do: true
  defp is_valid_score(score) when is_number(score) do
    score >= 0.0 and score <= 1.0
  end
  defp is_valid_score(_), do: false
end
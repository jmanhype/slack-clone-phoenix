# Claude Code 24/7 Automation - Tmux Configuration
# T-Max Orchestrator Pattern Configuration

# =============================================================================
# GENERAL SETTINGS
# =============================================================================

# Set scrollback buffer for Claude output (50k lines for comprehensive logging)
set-option -g history-limit 50000

# Enable 256 color support
set -g default-terminal "screen-256color"

# Enable mouse support for easier navigation
set -g mouse on

# Set base index to 1 (more intuitive)
set -g base-index 1
setw -g pane-base-index 1

# Faster command sequences
set -s escape-time 0

# =============================================================================
# CLAUDE-SPECIFIC SETTINGS
# =============================================================================

# Activity monitoring for Claude sessions
setw -g monitor-activity on
set -g visual-activity on

# Automatic window renaming based on current command
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{?pane_current_command,#{pane_current_command},#{b:pane_current_path}}'

# Set window title
set -g set-titles on
set -g set-titles-string "Claude: #S - #W"

# =============================================================================
# STATUS BAR CONFIGURATION
# =============================================================================

# Status bar position and update interval
set -g status-position bottom
set -g status-interval 1

# Status bar colors
set -g status-style 'bg=colour235 fg=colour137'

# Left side of status bar
set -g status-left-length 50
set -g status-left '#[fg=colour226,bg=colour235,bold] ðŸ¤– CLAUDE-FLOW #[fg=colour137]â”‚ #[fg=colour75]#S #[fg=colour137]â”‚ '

# Right side of status bar
set -g status-right-length 100
set -g status-right '#[fg=colour137]â”‚ #[fg=colour226]Agents: #{?client_prefix,#[reverse]PREFIX#[noreverse] ,}#[fg=colour75]#{window_index}:#{pane_index} #[fg=colour137]â”‚ #[fg=colour226]Tasks: #(npx claude-flow memory get "tasks/pending" 2>/dev/null | grep -o "[0-9]*" | head -1 || echo "0") #[fg=colour137]â”‚ #[fg=colour75]%H:%M:%S '

# Window status
setw -g window-status-style 'fg=colour137 bg=colour235'
setw -g window-status-format ' #I:#W#{?window_activity,*,} '

# Active window status
setw -g window-status-current-style 'fg=colour226 bg=colour238 bold'
setw -g window-status-current-format ' #I:#W#F '

# Window activity alerts
setw -g window-status-activity-style 'fg=colour226 bg=colour235 bold'

# =============================================================================
# PANE CONFIGURATION
# =============================================================================

# Pane borders
set -g pane-border-style 'fg=colour238'
set -g pane-active-border-style 'fg=colour226'

# Pane status (show pane title)
set -g pane-border-status top
set -g pane-border-format '#[fg=colour226]#{?pane_active,#[bold],} #{pane_index}: #{pane_title} #[default]'

# =============================================================================
# KEY BINDINGS FOR CLAUDE OPERATIONS
# =============================================================================

# Prefix key (Ctrl-A for easier access)
unbind C-b
set -g prefix C-a
bind C-a send-prefix

# Reload configuration
bind r source-file ~/.tmux.claude.conf \; display-message "Config reloaded!"

# Claude-specific operations
bind C new-session -s claude-new -n main "claude"
bind W new-window -n worker "bash automation/tmux/scripts/orchestrator/claude-worker.sh"
bind T send-keys "npx claude-flow task-master next" C-m
bind S send-keys "npx claude-flow swarm status" C-m
bind M new-window -n monitor "bash automation/tmux/scripts/monitoring/claude-dashboard.sh"
bind H send-keys "npx claude-flow hive-mind spawn" C-m
bind N send-keys "npx claude-flow training neural-train --data recent" C-m

# Quick task operations
bind t send-keys "task-master next && task-master status" C-m
bind d send-keys "task-master list --status=pending" C-m
bind c send-keys "task-master set-task-status --id " 

# Memory operations
bind m send-keys "npx claude-flow memory list" C-m
bind M send-keys "npx claude-flow memory store "

# Swarm operations
bind s send-keys "npx claude-flow swarm " 
bind a send-keys "npx claude-flow agent "

# Split panes with better defaults
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# Navigate panes with vim-like keys
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# Resize panes
bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5

# =============================================================================
# CLAUDE SESSION LAYOUTS
# =============================================================================

# Layout 1: Main orchestrator
bind 1 \
  new-session -d -s claude-main -n orchestrator \; \
  send-keys 'bash automation/tmux/scripts/orchestrator/t-max-init.sh' C-m \; \
  split-window -h -p 30 \; \
  send-keys 'htop -F claude' C-m \; \
  split-window -v \; \
  send-keys 'tail -f automation/tmux/logs/orchestrator.log' C-m \; \
  select-pane -t 0

# Layout 2: Worker grid (4 workers)
bind 2 \
  new-window -n workers \; \
  split-window -h \; \
  split-window -v \; \
  select-pane -t 0 \; \
  split-window -v \; \
  select-pane -t 0 \; \
  send-keys 'bash automation/tmux/scripts/orchestrator/claude-worker.sh 1' C-m \; \
  select-pane -t 1 \; \
  send-keys 'bash automation/tmux/scripts/orchestrator/claude-worker.sh 2' C-m \; \
  select-pane -t 2 \; \
  send-keys 'bash automation/tmux/scripts/orchestrator/claude-worker.sh 3' C-m \; \
  select-pane -t 3 \; \
  send-keys 'bash automation/tmux/scripts/orchestrator/claude-worker.sh 4' C-m

# Layout 3: Monitoring dashboard
bind 3 \
  new-window -n monitor \; \
  send-keys 'bash automation/tmux/scripts/monitoring/claude-dashboard.sh' C-m

# Layout 4: Hive mind coordination
bind 4 \
  new-window -n hive-mind \; \
  send-keys 'npx claude-flow hive-mind spawn --auto-spawn --verbose' C-m \; \
  split-window -h -p 30 \; \
  send-keys 'watch -n 1 "npx claude-flow hive-mind status"' C-m

# =============================================================================
# LOGGING AND CAPTURE
# =============================================================================

# Enable logging for all panes
bind L pipe-pane -o "cat >> automation/tmux/logs/#S-#W-#P-$(date +%Y%m%d-%H%M%S).log" \; display-message "Logging enabled"
bind l pipe-pane \; display-message "Logging disabled"

# Capture pane output
bind C capture-pane -S -3000 \; save-buffer "automation/tmux/sessions/capture-$(date +%Y%m%d-%H%M%S).txt" \; display-message "Pane captured"

# =============================================================================
# SESSION MANAGEMENT
# =============================================================================

# Quick session switching
bind ( switch-client -p
bind ) switch-client -n

# Session selection menu
bind s choose-tree -Zs

# Kill commands with confirmation
bind x kill-pane
bind X kill-window
bind Q confirm-before -p "Kill session #S? (y/n)" kill-session

# =============================================================================
# COPY MODE CONFIGURATION
# =============================================================================

# Use vi-style keys in copy mode
setw -g mode-keys vi

# Better copy mode bindings
bind Enter copy-mode
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi r send-keys -X rectangle-toggle

# =============================================================================
# HOOKS FOR AUTOMATION
# =============================================================================

# Alert when a task completes
set-hook -g alert-activity 'run-shell "echo Task completed in window #{window_name} >> automation/tmux/logs/alerts.log"'

# Auto-save session on exit
set-hook -g session-closed 'run-shell "bash automation/tmux/scripts/persistence/session-backup.sh #{session_name}"'

# Auto-restore on session creation
set-hook -g session-created 'run-shell "bash automation/tmux/scripts/persistence/preserve-state.sh restore #{session_name}"'

# =============================================================================
# PERFORMANCE OPTIMIZATIONS
# =============================================================================

# Reduce resource usage
setw -g automatic-rename off
set -g set-titles off

# Aggressive resize
setw -g aggressive-resize on

# =============================================================================
# PLUGINS (if using tpm)
# =============================================================================

# List of plugins
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'

# Plugin settings
# set -g @resurrect-dir 'automation/tmux/sessions/resurrect'
# set -g @continuum-restore 'on'
# set -g @continuum-save-interval '5'

# Initialize TMUX plugin manager (keep this line at the very bottom)
# run '~/.tmux/plugins/tpm/tpm'